<?php


namespace ahmadasjad\yii2PlusYii1;

use CException;
use CWidget;
use Yii;
use yii\base\InvalidConfigException;
use yii\helpers\Url;
use yii\web\AssetBundle;

/**
 * @author Ahmad Asjad <ahmadcimage@gmail.com>
 */
class View  extends \yii\web\View
{
    private $_widgetStack=array();
    private $_menu = [];

    /**
     * @param string $url
     * @param array $options Ignored
     * @param null $key Ignored
     */
//    public function registerCssFile($url, $options = [], $key = null)
//    {
////        Yii::log('Registering ' . $url, 'info', __METHOD__);
//        // Register in parent in order to trigger any errors with the parameters
//        parent::registerCssFile($url, $options, $key);
//        // Register using Yii1 client script
//        $clientScript = Yii::app()->getClientScript();
//        //$url = $this->getAssetsUrl() . $url;
//        $clientScript->registerCssFile($url);
//    }
//    public function registerJsFile($url, $options = [], $key = null)
//    {
////        Yii::log('Registering ' . $url, 'info', __METHOD__);
//        // Register in parent in order to trigger any errors with the parameters
//        parent::registerJsFile($url, $options, $key);
//        // Register using Yii1 client script
//        $clientScript = Yii::app()->getClientScript();
//        //$url = $this->getAssetsUrl() . $url;
//        $clientScript->registerScriptFile($url);
//    }
//    public function registerJs($js, $position = self::POS_READY, $key = null)
//    {
////        Yii::log('Registering ' . $js, 'info', __METHOD__);
//        // Register in parent in order to trigger any errors with the parameters
//        parent::registerJs($js, $position, $key);
//        // Register using Yii1 client script
//        $clientScript = Yii::app()->getClientScript();
//        $clientScript->registerScript(uniqid(), $js, $position);
//    }
//    /**
//     * Usually performed within View->endBody() in Yii 2 themes.
//     * We'll need to trigger this manually in our Yii 1 views or layouts (see README.md)
//     */
//    public function registerYii2Assets()
//    {
//        foreach (array_keys($this->assetBundles) as $bundle) {
//            $this->registerAssetFiles($bundle);
//        }
//    }

	/**
	 * Creates a widget and initializes it.
	 * This method first creates the specified widget instance.
	 * It then configures the widget's properties with the given initial values.
	 * At the end it calls {@link CWidget::init} to initialize the widget.
	 * Starting from version 1.1, if a {@link CWidgetFactory widget factory} is enabled,
	 * this method will use the factory to create the widget, instead.
	 * @param string $className class name (can be in path alias format)
	 * @param array $properties initial property values
	 * @return CWidget the fully initialized widget instance.
	 */
	public function createWidget($className,$properties=array())
	{
		$widget=Yii::app()->getWidgetFactory()->createWidget($this,$className,$properties);
		$widget->init();
		return $widget;
	}

	/**
	 * Creates a widget and executes it.
	 * @param string $className the widget class name or class in dot syntax (e.g. application.widgets.MyWidget)
	 * @param array $properties list of initial property values for the widget (Property Name => Property Value)
	 * @param boolean $captureOutput whether to capture the output of the widget. If true, the method will capture
	 * and return the output generated by the widget. If false, the output will be directly sent for display
	 * and the widget object will be returned. This parameter is available since version 1.1.2.
	 * @return mixed the widget instance when $captureOutput is false, or the widget output when $captureOutput is true.
	 * @throws Exception
	 */
	public function widget($className,$properties=array(),$captureOutput=false)
	{
		if($captureOutput)
		{
			ob_start();
			ob_implicit_flush(false);
			try
			{
				$widget=$this->createWidget($className,$properties);
				$widget->run();
			}
			catch(Exception $e)
			{
				ob_end_clean();
				throw $e;
			}
			return ob_get_clean();
		}
		else
		{
			$widget=$this->createWidget($className,$properties);
			$widget->run();
			return $widget;
		}
	}


    /**
     * Creates a widget and executes it.
     * This method is similar to {@link widget()} except that it is expecting
     * a {@link endWidget()} call to end the execution.
     * @param string $className the widget class name or class in dot syntax (e.g. application.widgets.MyWidget)
     * @param array $properties list of initial property values for the widget (Property Name => Property Value)
     * @return CWidget the widget created to run
     * @see endWidget
     */
    public function beginWidget($className,$properties=array())
    {
        $widget=$this->createWidget($className,$properties);
        $this->_widgetStack[]=$widget;
        return $widget;
    }

    /**
     * Ends the execution of the named widget.
     * This method is used together with {@link beginWidget()}.
     * @param string $id optional tag identifying the method call for debugging purpose.
     * @return CWidget the widget just ended running
     * @throws CException if an extra endWidget call is made
     * @see beginWidget
     */
    public function endWidget($id='')
    {
        if(($widget=array_pop($this->_widgetStack))!==null)
        {
            $widget->run();
            return $widget;
        }
        else
            throw new CException(Yii::t('yii','{controller} has an extra endWidget({id}) call in its view.',
                array('{controller}'=>get_class($this),'{id}'=>$id)));
    }

    /**
     * Creates a relative URL for the specified action defined in this controller.
     * @param string $route the URL route. This should be in the format of 'ControllerID/ActionID'.
     * If the ControllerID is not present, the current controller ID will be prefixed to the route.
     * If the route is empty, it is assumed to be the current action.
     * If the controller belongs to a module, the {@link CWebModule::getId module ID}
     * will be prefixed to the route. (If you do not want the module ID prefix, the route should start with a slash '/'.)
     * @param array $params additional GET parameters (name=>value). Both the name and value will be URL-encoded.
     * If the name is '#', the corresponding value will be treated as an anchor
     * and will be appended at the end of the URL.
     * @param string $ampersand the token separating name-value pairs in the URL.
     * @return string the constructed URL
     */
    public function createUrl($route,$params=array(),$ampersand='&')
    {
//        if($route==='')
//            $route=$this->getId().'/'.$this->getAction()->getId();
//        elseif(strpos($route,'/')===false)
//            $route=$this->getId().'/'.$route;
//        if($route[0]!=='/' && ($module=$this->getModule())!==null)
//            $route=$module->getId().'/'.$route;
//        return Yii::app()->createUrl(trim($route,'/'),$params,$ampersand);
        return Url::toRoute(array_merge([trim($route,'/')],$params), true);
        return Yii::$app->urlManager->createUrl(array_merge([$route],$params));
    }

    public function renderPartial($view, $params=[], $context=''){
        return $this->render($view, $params, $context);
    }

    public function setBreadcrumbs($breadcrumbs){
        foreach ($breadcrumbs as $key => $val){
            if(is_string($key)){
                $this->params['breadcrumbs'][] = ['label' => $key, 'url' => $val];
            }else{
                $this->params['breadcrumbs'][] = ['label' => $val];
            }

        }
    }

    public function findViewFile($view, $context = null): string {
        $file = parent::findViewFile($view, $context);
        if(!file_exists($file)){
            $altFile = $this->findViewFileWithCamelCase($view, $context = null);
            if (file_exists($altFile)){
                $file = $altFile;
            }
        }
        return $file;
    }

    private function findViewFileWithCamelCase($view, $context = null): string {
        if (strncmp($view, '/', 1) !== 0) {
            $controllerId = Yii::$app->controller->id;
            $view = '/' . $this->dashToCamel($controllerId) . '/' . $view;
        }

        $file = parent::findViewFile($view, $context);
        return $file;
    }

    /**
     * Convert hyphen-strings to camelCase (medial capitals).
     *
     * @param {string} $str
     *
     * @return {string}
     */
    private function dashToCamel ($str) {
        // Remove hyphen, capitalize words, squash, lowercase first.
        return lcfirst(str_replace(' ', '', ucwords(str_replace('-', ' ', $str))));
    }

    public function setPageTitle($title){
        $this->title = $title;
    }

    public function getPageTitle(){
        return $this->title;
    }

    public function getRoute() {
        return Yii::$app->controller->route;
    }

    public function setMenu($menu){
        $this->_menu = $menu;
    }

    public function geMenu(){
        return $this->_menu;
    }

}
